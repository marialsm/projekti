{"ast":null,"code":"import { catchError, map } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let CrudService = /*#__PURE__*/(() => {\n  class CrudService {\n    constructor(httpClient) {\n      this.httpClient = httpClient; // Node/Express API\n\n      this.REST_API = 'http://localhost:8000/api'; // Http Header\n\n      this.httpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\n    } // Add\n\n\n    AddBook(data) {\n      let API_URL = `${this.REST_API}/add-book`;\n      return this.httpClient.post(API_URL, data).pipe(catchError(this.handleError));\n    } // Get all objects\n\n\n    GetBooks() {\n      return this.httpClient.get(`${this.REST_API}`);\n    } // Get single object\n\n\n    GetBook(id) {\n      console.error(\"foo1\");\n      let API_URL = `${this.REST_API}/read-book/${id}`;\n      console.log(\"foo2\");\n      return this.httpClient.get(API_URL, {\n        headers: this.httpHeaders\n      }).pipe(map(res => {\n        return res || {};\n      }), catchError(this.handleError));\n    } //Tämän olen lisännyt itse \n    // Hae jokin tietty tai tietyt kirjat jonkun ehdon perusteella\n\n\n    GetSomeBooks(txt) {\n      console.log('*** GetSomeBooks:' + txt);\n      let API_URL = `${this.REST_API}/read-books/${txt}`; //let API_URL = `${this.REST_API}/read-books/b`;\n\n      console.log('*** GetSomeBooks API_URL:' + API_URL);\n      return this.httpClient.get(API_URL, {\n        headers: this.httpHeaders\n      }).pipe(map(res => {\n        return res || {};\n      }), catchError(this.handleError));\n    } // Update\n\n\n    updateBook(id, data) {\n      let API_URL = `${this.REST_API}/update-book/${id}`;\n      return this.httpClient.put(API_URL, data, {\n        headers: this.httpHeaders\n      }).pipe(catchError(this.handleError));\n    } // Delete\n\n\n    deleteBook(id) {\n      let API_URL = `${this.REST_API}/delete-book/${id}`;\n      return this.httpClient.delete(API_URL, {\n        headers: this.httpHeaders\n      }).pipe(catchError(this.handleError));\n    } // Error \n\n\n    handleError(error) {\n      let errorMessage = '';\n\n      if (error.error instanceof ErrorEvent) {\n        // Handle client error\n        errorMessage = error.error.message;\n      } else {\n        // Handle server error\n        errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n      }\n\n      console.log(errorMessage);\n      return throwError(errorMessage);\n    }\n\n  }\n\n  CrudService.ɵfac = function CrudService_Factory(t) {\n    return new (t || CrudService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  CrudService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CrudService,\n    factory: CrudService.ɵfac,\n    providedIn: 'root'\n  });\n  return CrudService;\n})();","map":null,"metadata":{},"sourceType":"module"}